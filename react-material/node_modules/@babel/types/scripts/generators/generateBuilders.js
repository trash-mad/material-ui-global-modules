"use strict";

var definitions = require("../../lib/definitions");
var formatBuilderName = require("../utils/formatBuilderName");
var lowerFirst = require("../utils/lowerFirst");

module.exports = function generateBuilders() {
  var output = "// @flow\n/*\n * This file is auto-generated! Do not modify it directly.\n * To re-generate run 'make build'\n */\nimport builder from \"../builder\";\n\n";

  Object.keys(definitions.BUILDER_KEYS).forEach(function (type) {
    output += "export function " + type + "(...args: Array<any>): Object { return builder(\"" + type + "\", ...args); }\nexport { " + type + " as " + formatBuilderName(type) + " };\n";

    // This is needed for backwards compatibility.
    // It should be removed in the next major version.
    // JSXIdentifier -> jSXIdentifier
    if (/^[A-Z]{2}/.test(type)) {
      output += "export { " + type + " as " + lowerFirst(type) + " }\n";
    }
  });

  Object.keys(definitions.DEPRECATED_KEYS).forEach(function (type) {
    var newType = definitions.DEPRECATED_KEYS[type];
    output += "export function " + type + "(...args: Array<any>): Object {\n  console.trace(\"The node type " + type + " has been renamed to " + newType + "\");\n  return " + type + "(\"" + type + "\", ...args);\n}\nexport { " + type + " as " + formatBuilderName(type) + " };\n";

    // This is needed for backwards compatibility.
    // It should be removed in the next major version.
    // JSXIdentifier -> jSXIdentifier
    if (/^[A-Z]{2}/.test(type)) {
      output += "export { " + type + " as " + lowerFirst(type) + " }\n";
    }
  });

  return output;
};