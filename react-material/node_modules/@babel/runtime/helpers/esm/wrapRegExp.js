"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _wrapRegExp;

var _typeof2 = require("../../helpers/esm/typeof");

var _typeof3 = _interopRequireDefault(_typeof2);

var _wrapNativeSuper = require("./wrapNativeSuper");

var _wrapNativeSuper2 = _interopRequireDefault(_wrapNativeSuper);

var _getPrototypeOf = require("./getPrototypeOf");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _possibleConstructorReturn = require("./possibleConstructorReturn");

var _possibleConstructorReturn2 = _interopRequireDefault(_possibleConstructorReturn);

var _inherits = require("./inherits");

var _inherits2 = _interopRequireDefault(_inherits);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _wrapRegExp(re, groups) {
  exports.default = _wrapRegExp = function _wrapRegExp(re, groups) {
    return new BabelRegExp(re, groups);
  };

  var _RegExp = (0, _wrapNativeSuper2.default)(RegExp);

  var _super = RegExp.prototype;

  var _groups = new WeakMap();

  function BabelRegExp(re, groups) {
    var _this = _RegExp.call(this, re);

    _groups.set(_this, groups);

    return _this;
  }

  (0, _inherits2.default)(BabelRegExp, _RegExp);

  BabelRegExp.prototype.exec = function (str) {
    var result = _super.exec.call(this, str);

    if (result) result.groups = buildGroups(result, this);
    return result;
  };

  BabelRegExp.prototype[Symbol.replace] = function (str, substitution) {
    if (typeof substitution === "string") {
      var groups = _groups.get(this);

      return _super[Symbol.replace].call(this, str, substitution.replace(/\$<([^>]+)>/g, function (_, name) {
        return "$" + groups[name];
      }));
    } else if (typeof substitution === "function") {
      var _this = this;

      return _super[Symbol.replace].call(this, str, function () {
        var args = [];
        args.push.apply(args, arguments);

        if ((0, _typeof3.default)(args[args.length - 1]) !== "object") {
          args.push(buildGroups(args, _this));
        }

        return substitution.apply(this, args);
      });
    } else {
      return _super[Symbol.replace].call(this, str, substitution);
    }
  };

  function buildGroups(result, re) {
    var g = _groups.get(re);

    return Object.keys(groups).reduce(function (groups, name) {
      groups[name] = result[g[name]];
      return groups;
    }, Object.create(null));
  }

  return _wrapRegExp.apply(this, arguments);
}